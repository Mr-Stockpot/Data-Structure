#define _CRT_SECURE_NO_WARNINGS 1
#include <stdio.h>

//树
//定义：
//    专业定义：
//           1.有且只有一个称为根（root）的节点     
//           2.有若干个互不相交的子树，这些子树本身也是树
//    通俗定义：
//           1.树是由节点和边（指针）组成
//           2.每一个节点只有一个父节点，但可以有多个子节点
//           3.只有一个节点没有父节点，称为根节点
//    专业术语：
//        节点
//        深度：根节点到最底层节点的层数
//              根节点是第一层
//        叶子节点：没有子节点的节点
//        非终端节点：非叶子节点
//        度：子节点的个数
//分类：
//    1.一般树
//      任意一个节点的子节点的个数不受限制
//    2.二叉树
//      任意一个节点的子节点个数最多两个，且子节点的位置都是不可更改的
//      分类：
//		1.一般二叉树
//      2.满二叉树
//         在不增加树的层数的前提下，无法再多添加一个
//         节点的二叉树
//      3.完全二叉树
//         只是删除了满二叉树最低层最右边的连续若干个
//         节点的二叉树   
//	  3.森林
//      n个互不相交的树的集合
// 
//树的存储：
//		二叉树的存储
//         连续存储【完全二叉树】
//            优点：查找某个节点的父节点和子节点速度很快
//            缺点：耗用内存空间大
//         链式存储
//            
//      一般树的存储
//            双亲表示法 
//                  求父节点方便
//            孩子表示法
//                  求子节点方便
//            双亲孩子表示法
//                  求父节点和子节点都很方便
//            二叉树表示法
//                  把一个普通树转化为二叉树来存储
//                  具体转化方法
//                      设法保证任意一个节点的
//                          左指针域指向它的第一个孩子
//                          右指针域指向它的下一个兄第
//      森林的存储
//           把一个森林转化为二叉树来存储 
//操作：
//      树的遍历
//          先序遍历：先访问根节点 - 先序访问左子树 - 先序访问右子树
//          中序遍历：中序遍历左子树 - 访问根节点 - 中序遍历右子树
//          后序遍历：中序遍历左子树 - 中序遍历右子树 - 访问根节点
//      已知两种遍历序列求原始二叉树
//应用：
//     树是数据库中数据组织一种重要形式
//     操作系统子父进程的关系本身就是一棵树
//     面向对象语言中类的继承关系本身就是一棵树
//     赫夫曼树

